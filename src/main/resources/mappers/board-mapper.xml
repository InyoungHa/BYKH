<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="boardMapper">
	<resultMap type="com.bykh.groupware.notice.vo.BoardMenuVO" id="boardMenu">
		<id 	column="BOARD_MENU_CODE" 	property="boardMenuCode"/>
		<result column="BOARD_MENU_NAME" 	property="boardMenuName"/>
	</resultMap>
	
	<resultMap type="com.bykh.groupware.notice.vo.BoardCategoryVO" id="boardCategory">
		<id 	column="BOARD_CATE_CODE" 	property="boardCateCode"/>
		<result column="BOARD_CATE_NAME" 	property="boardCateName"/>
	</resultMap>
	
	<resultMap type="com.bykh.groupware.notice.vo.BoardFileVO" id="boardFile">
		<id column="FILE_NUM" 				property="fileNum"/>
		<result column="ORIGIN_FILE_NAME" 	property="originFileName"/>
		<result column="ATTACHED_FILE_NAME" property="attachedFileName"/>
		<result column="FILE_SIZE" 			property="fileSize"/>
		<result column="BOARD_NUM" 			property="boardNum"/>
	</resultMap>
	
	<resultMap type="com.bykh.groupware.notice.vo.BoardVO" id="board">
		<id 	column="BOARD_NUM" 			property="boardNum"/>
		<result column="BOARD_TITLE" 		property="boardTitle"/>
		<result column="BOARD_CONTENT" 		property="boardContent"/>
		<result column="BOARD_WRITER" 		property="boardWriter"/>
		<result column="BOARD_DATE" 		property="boardDate"/>
		<result column="BOARD_VIEW" 		property="boardView"/>
		<result column="BOARD_STATUS" 		property="boardStatus"/>
		<result column="IS_IMPORTANT" 		property="isImportant"/>
		<result column="IS_PRIVATE" 		property="isPrivate"/>
		<result column="BOARD_PW" 			property="boardPw"/>
		<result column="ENAME" 				property="ename"/>
		<result column="BOARD_PREV_NUM" 	property="boardPrevNum"/>
		<result column="BOARD_PREV_TITLE" 	property="boardPrevTitle"/>
		<result column="BOARD_PREV_PRIVATE" property="boardPrevPrivate"/>
		<result column="BOARD_NEXT_NUM" 	property="boardNextNum"/>
		<result column="BOARD_NEXT_TITLE" 	property="boardNextTitle"/>
		<result column="BOARD_NEXT_PRIVATE" property="boardNextPrivate"/>
		<result column="FILE_CNT" 			property="fileCnt"/>
		<result column="REPLY_CNT" 			property="replyCnt"/>
		<result column="LIKE_CNT" 			property="likeCnt"/>
		<association property="boardMenuVO" 	resultMap="boardMenu"></association>
		<association property="boardCategoryVO" resultMap="boardCategory"></association>
		<collection property="boardFileList" 	resultMap="boardFile"></collection>
		<collection property="replyList" 		resultMap="replyMapper.reply"></collection>
	</resultMap>
	
	<resultMap type="com.bykh.groupware.community.vo.BoardLikeVO" id="boardLike">
		<id 	column="LIKE_NUM" 	property="likeNum"/>
		<result column="LIKE_USER" 	property="likeUser"/>
		<result column="BOARD_NUM" 	property="boardNum"/>
	</resultMap>
	
	
	<!-- 글 개수 조회 -->
	<select id="getBoardCnt" resultType="int">
		SELECT COUNT(BOARD_NUM)
		FROM BOARD, EMP
		WHERE BOARD_MENU_CODE = #{boardMenuVO.boardMenuCode}
		AND BOARD_STATUS = 1
		AND BOARD_WRITER = EMPNO
		<if test='searchBoardVO != null and !searchBoardVO.searchKeyword.equals("")'>
		AND UPPER(${searchBoardVO.searchSelect}) LIKE '%'||UPPER(#{searchBoardVO.searchKeyword})||'%'
		</if>
		<if test='searchBoardVO != null and searchBoardVO.searchCate != null'>
		AND BOARD.BOARD_CATE_CODE = #{searchBoardVO.searchCate}
		</if>
	</select>
	
	<!-- 카테고리 조회 -->
	<select id="getBoardCate" resultMap="boardCategory">
		SELECT BOARD_CATE_CODE
			, BOARD_CATE_NAME
		FROM BOARD_CATEGORY
	</select>
	
	<!--  글 목록 조회 -->
	<!-- 상태값 1(등록) --> 
	<select id="getBoardList" resultMap="board">
		SELECT BOARD.BOARD_NUM
		    , BOARD_TITLE
		    , BOARD_WRITER
		    , TO_CHAR(BOARD_DATE, 'YYYY-MM-DD') BOARD_DATE
		    , TO_CHAR(BOARD_DATE, 'YYYY-MM-DD HH24:MI:SS') BOARD_DATE_ORDER
		    , BOARD_VIEW
		    , ENAME
		    , (SELECT COUNT(FILE_NUM) 
				FROM BOARD_FILE
				WHERE BOARD_NUM = BOARD.BOARD_NUM) FILE_CNT
			, (SELECT COUNT(REPLY_NUM)
                FROM BOARD_REPLY
                WHERE BOARD_NUM = BOARD.BOARD_NUM) REPLY_CNT
			, (SELECT COUNT(LIKE_NUM)
                FROM BOARD_LIKE
                WHERE BOARD_NUM = BOARD.BOARD_NUM) LIKE_CNT
			, FILE_NUM
            , ORIGIN_FILE_NAME
            , BOARD_CATE_NAME
            , IS_PRIVATE
		FROM BOARD, EMP, BOARD_FILE, BOARD_CATEGORY CATE
		WHERE BOARD_MENU_CODE = #{boardMenuVO.boardMenuCode}
		AND BOARD_STATUS = 1
		AND BOARD_WRITER = EMPNO
		AND BOARD.BOARD_NUM = BOARD_FILE.BOARD_NUM (+)
		AND BOARD.BOARD_CATE_CODE = CATE.BOARD_CATE_CODE (+)
		<if test='searchBoardVO != null and !searchBoardVO.searchKeyword.equals("")'>
		AND UPPER(${searchBoardVO.searchSelect}) LIKE '%'||UPPER(#{searchBoardVO.searchKeyword})||'%'
		</if>
		<if test='searchBoardVO != null and searchBoardVO.searchCate != null'>
		AND BOARD.BOARD_CATE_CODE = #{searchBoardVO.searchCate}
		</if>
		ORDER BY BOARD_DATE_ORDER DESC
		OFFSET #{offsetCnt} ROWS FETCH FIRST #{displayCnt} ROWS ONLY
	</select>
	
	<!-- 중요글 목록 조회 -->
	<select id="getBoardImportantList" resultMap="board">
		SELECT BOARD.BOARD_NUM
			, BOARD_TITLE
			, BOARD_WRITER
			, TO_CHAR(BOARD_DATE, 'YYYY-MM-DD') BOARD_DATE
			, TO_CHAR(BOARD_DATE, 'YYYY-MM-DD HH24:MI:SS') BOARD_DATE_ORDER
			, BOARD_VIEW
		    , ENAME
		    , (SELECT COUNT(FILE_NUM) 
				FROM BOARD_FILE
				WHERE BOARD_NUM = BOARD.BOARD_NUM) FILE_CNT
			, (SELECT COUNT(REPLY_NUM)
                FROM BOARD_REPLY
                WHERE BOARD_NUM = BOARD.BOARD_NUM) REPLY_CNT
			, FILE_NUM
            , ORIGIN_FILE_NAME
		FROM BOARD, EMP, BOARD_FILE
		WHERE BOARD_MENU_CODE = #{boardMenuVO.boardMenuCode}
		AND IS_IMPORTANT = 'Y'
		AND BOARD_STATUS = 1
		AND BOARD_WRITER = EMPNO
		AND BOARD.BOARD_NUM = BOARD_FILE.BOARD_NUM (+)
		ORDER BY BOARD_DATE_ORDER DESC
	</select>
	
	<!-- 다음으로 들어갈 글 번호 조회 -->
	<select id="getNextBoardNum" resultType="String">
		SELECT 'BOARD_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(BOARD_NUM, 7))), 0) + 1, 3, '0')
		FROM BOARD
	</select>
	
	<!-- 공지사항 글 등록 -->
	<insert id="regBoard">
		INSERT INTO BOARD (
			BOARD_NUM
			, BOARD_TITLE
			, BOARD_CONTENT
			, BOARD_WRITER
			, BOARD_MENU_CODE
			, BOARD_STATUS
			<if test="isImportant != null">
			, IS_IMPORTANT
			</if>
			<if test="isPrivate != null">
			, IS_PRIVATE
			, BOARD_PW
			</if>
			<if test="boardCategoryVO != null and boardCategoryVO.boardCateCode != null">
			, BOARD_CATE_CODE
			</if>
		) VALUES (
			#{boardNum}
			, #{boardTitle}
			, #{boardContent}
			, #{boardWriter}
			, #{boardMenuVO.boardMenuCode}
			, #{boardStatus}
			<if test="isImportant != null">
			, #{isImportant}
			</if>
			<if test="isPrivate != null">
			, #{isPrivate}
			, #{boardPw}
			</if>
			<if test="boardCategoryVO != null and boardCategoryVO.boardCateCode != null">
			, #{boardCategoryVO.boardCateCode}
			</if>
		)
	</insert>
	
	<!-- 다음 첨부파일 번호 조회 -->
	<select id="getNextFileNumber" resultType="int">
		SELECT LPAD(NVL(MAX(TO_NUMBER(SUBSTR(FILE_NUM, 6))), 0) + 1, 3, '0')
		FROM BOARD_FILE
	</select>
	
	
	<!-- 글 첨부파일 정보 등록 -->
	<insert id="regFiles">
		INSERT INTO BOARD_FILE (
			FILE_NUM
			, ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
			, FILE_SIZE
			, BOARD_NUM
		) 
		<foreach collection="boardFileList" item="boardFile" index="i" separator="UNION ALL">
			SELECT
				#{boardFile.fileNum}
				, #{boardFile.originFileName}
				, #{boardFile.attachedFileName}
				, #{boardFile.fileSize}
				, #{boardFile.boardNum}
			FROM DUAL
		</foreach>
	</insert>
	
	
	<!-- 글 상세 조회 -->
	<select id="getBoardDetail" resultMap="board">
		SELECT * FROM
			(SELECT BOARD_NUM
				, BOARD_TITLE
				, BOARD_CONTENT
				, BOARD_WRITER
				, TO_CHAR(BOARD_DATE, 'YYYY-MM-DD HH24:MI') BOARD_DATE
				, BOARD_STATUS
				, BOARD_VIEW
				, IS_IMPORTANT
				, ENAME
				, BOARD_MENU_CODE
				, CATE.BOARD_CATE_CODE
				, BOARD_CATE_NAME
				, IS_PRIVATE
				, BOARD_PW
				, (SELECT COUNT(REPLY_NUM)
                    FROM BOARD_REPLY
                    WHERE BOARD_NUM = #{boardNum}) REPLY_CNT
                , (SELECT COUNT(LIKE_NUM)
					FROM BOARD_LIKE
					WHERE BOARD_NUM = #{boardNum}) LIKE_CNT
	            , LAG(BOARD_NUM, 1, 'BOARD_000') OVER(PARTITION BY BOARD_MENU_CODE ORDER BY BOARD_NUM) AS BOARD_PREV_NUM
	            , LAG(BOARD_TITLE, 1, '이전 글이 없습니다.') OVER(PARTITION BY BOARD_MENU_CODE ORDER BY BOARD_NUM) AS BOARD_PREV_TITLE
	            , LAG(IS_PRIVATE, 1, 'N') OVER(PARTITION BY BOARD_MENU_CODE ORDER BY BOARD_NUM) AS BOARD_PREV_PRIVATE
	            , LEAD(BOARD_NUM, 1, 'BOARD_000') OVER(PARTITION BY BOARD_MENU_CODE ORDER BY BOARD_NUM) AS BOARD_NEXT_NUM
	            , LEAD(BOARD_TITLE, 1, '다음 글이 없습니다.') OVER(PARTITION BY BOARD_MENU_CODE ORDER BY BOARD_NUM) AS BOARD_NEXT_TITLE
	            , LEAD(IS_PRIVATE, 1, 'N') OVER(PARTITION BY BOARD_MENU_CODE ORDER BY BOARD_NUM) AS BOARD_NEXT_PRIVATE
			FROM BOARD, EMP, BOARD_CATEGORY CATE
			WHERE BOARD_WRITER = EMPNO
            AND BOARD.BOARD_CATE_CODE = CATE.BOARD_CATE_CODE (+))
		WHERE BOARD_NUM = #{boardNum}
	</select>
	
	<!-- (상세 조회) + 첨부파일 조회 -->
	<select id="getBoardFile" resultMap="boardFile">
	 	SELECT FILE_NUM
            , ORIGIN_FILE_NAME
            , ATTACHED_FILE_NAME
            , FILE_SIZE
        FROM BOARD, BOARD_FILE
        WHERE BOARD.BOARD_NUM = BOARD_FILE.BOARD_NUM
        AND BOARD.BOARD_NUM = #{boardNum}
	</select>
	
	<!-- (상세 조회) + 댓글 리스트 조회 -->
	<select id="getReplyList" resultMap="replyMapper.reply">
		SELECT REPLY_NUM
		    , REPLY_WRITER
		    , ENAME
		    , REPLY_CONTENT
		    , TO_CHAR(REPLY_DATE, 'YYYY-MM-DD HH24:MI') REPLY_DATE
		    , (SELECT ATTACHED_FILE_NAME 
		        FROM E_IMG 
		        WHERE REPLY_WRITER = E_IMG.EMPNO) AS ATTACHED_FILE_NAME
		FROM BOARD_REPLY, EMP
		WHERE BOARD_NUM = #{boardNum}
		AND REPLY_WRITER = EMPNO
		ORDER BY REPLY_NUM
	</select>
	
	
	<!-- 조회수 증가 -->
	<update id="updateBoardView">
		UPDATE BOARD
		SET BOARD_VIEW = BOARD_VIEW + 1
		WHERE BOARD_NUM = #{boardNum}
	</update>
	
	<!-- 글 삭제 -->
	<delete id="deleteBoard">
		DELETE BOARD
		WHERE BOARD_NUM = #{boardNum}
	</delete>
	
	<!-- 글 수정  -->
	<update id="updateBoard">
		UPDATE BOARD
		SET BOARD_TITLE = #{boardTitle}
			, BOARD_CONTENT = #{boardContent}
			, IS_IMPORTANT = #{isImportant}
			, BOARD_STATUS = #{boardStatus}
			<if test="boardDate != null">
			, BOARD_DATE = ${boardDate}
			</if>
			<if test="boardCategoryVO != null and boardCategoryVO.boardCateCode != null">
			, BOARD_CATE_CODE = #{boardCategoryVO.boardCateCode}
			</if>
			, IS_PRIVATE = #{isPrivate}
			<if test='isPrivate == "Y"'>
			, BOARD_PW = #{boardPw}
			</if>
			<if test='isPrivate == "N"'>
			, BOARD_PW = NULL
			</if>
		WHERE BOARD_NUM = #{boardNum}
	</update>
	
	<!-- 첨부파일 삭제 -->
	<delete id="deleteFile">
		DELETE BOARD_FILE
		WHERE FILE_NUM = #{fileNum}
	</delete>
	
	<!-- 파일 번호로 정보 조회 -->
	<select id="getDownloadFileVO" resultMap="boardFile">
		SELECT ORIGIN_FILE_NAME
			, ATTACHED_FILE_NAME
		FROM BOARD_FILE
		WHERE FILE_NUM = #{fileNum}			
	</select>
	
	<!-- 글 번호로 파일 정보 조회 -->
	<select id="getFileNumByBoardNum" resultType="String">
		SELECT FILE_NUM
		FROM BOARD_FILE
		WHERE BOARD_NUM = #{boardNum}
	</select>
	
	<!-- 사번으로 임시저장글 조회 -->
	<select id="getTempBoardListByEmpno" resultMap="board">
		SELECT BOARD_NUM
		    , BOARD_TITLE
		    , TO_CHAR(BOARD_DATE, 'YYYY-MM-DD HH24:MI') BOARD_DATE
		FROM BOARD, EMP
		WHERE EMPNO = #{empno}
		AND BOARD_WRITER = EMPNO
		AND BOARD_STATUS = 2
		AND BOARD_MENU_CODE = #{boardMenuCode}
		ORDER BY BOARD_NUM DESC
	</select>
	
	<!-- 사번으로 임시저장글 개수 조회 -->
	<select id="getTempBoardCntByEmpno" resultType="int">
		SELECT COUNT(BOARD_NUM)
		FROM BOARD, EMP
		WHERE EMPNO = #{empno}
		AND BOARD_WRITER = EMPNO
		AND BOARD_STATUS = 2
		AND BOARD_MENU_CODE = #{boardMenuCode}
	</select>
	
	<select id="checkBoardNum" resultType="String">
		SELECT BOARD_NUM
        FROM BOARD
        WHERE BOARD_NUM = #{boardNum}
        AND BOARD_PW = #{boardPw}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="insertBoardLike">
		INSERT INTO BOARD_LIKE (
			LIKE_NUM
			, LIKE_USER
			, BOARD_NUM
		) VALUES (
			(SELECT 'LIKE_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(LIKE_NUM, 6))), 0) + 1, 3, '0')
			FROM BOARD_LIKE)
			, #{likeUser}
			, #{boardNum}
		)
	</insert>
	
	<!-- 좋아요 눌렀는지 체크 -->
	<select id="getLikeCheck" resultType="boolean">
		SELECT COUNT(LIKE_NUM)
        FROM BOARD_LIKE
        WHERE BOARD_NUM = #{boardNum}
        AND LIKE_USER = #{likeUser}
	</select>
	
	<!-- 좋아요 취소 -->
	<delete id="deleteBoardLike">
		DELETE BOARD_LIKE
		WHERE BOARD_NUM = #{boardNum}
		AND LIKE_USER = #{likeUser}
	</delete>
</mapper>



